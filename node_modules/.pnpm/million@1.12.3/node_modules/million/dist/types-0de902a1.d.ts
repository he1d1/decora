declare type FC = (props?: VProps, key?: string | null) => any;
declare type RawVNode = VNode | number | boolean | undefined | null;
declare namespace JSX {
    type Element = VNode;
    interface IntrinsicElements {
        [el: string]: VProps;
    }
}

/*! (c) Andrea Giammarchi - ISC */

declare const hook: (fn: any, catchError: any) => () => any;
declare const useReducer: <T>(reducer: any, value: any, init?: any, options?: any) => any[];
declare const useState: <T>(value?: T | undefined, options?: any) => any[];
declare const createContext: (value: any) => {
    value: any;
    Provider: ({ value }: {
        value: any;
    }) => any;
    Consumer: () => any;
};
declare const useContext: (context: any) => any;
declare const useEffect: (effect: any, guards?: any) => void;
declare const useLayoutEffect: (effect: any, guards?: any) => void;
declare const useMemo: (memo: any, guards?: any) => any;
declare const useCallback: (fn: any, guards?: any) => any;
declare const useRef: (value?: any) => any;
declare const useTransition: () => ((work: () => void) => void)[];
declare const useId: () => any;
declare const useDebugValue: (value: any) => void;
declare const useDeferredValue: (value: any) => any;
declare const useSyncExternalStore: (subscribe: any, getSnapshot: any) => any;
declare const useImperativeHandle: (ref: any, create: any) => void;
declare const useDelta: () => DeltaTypes[] & {
    create: (index: number) => void;
    update: (index: number) => void;
    delete: (index: number) => void;
};
declare const useList: (array: any[]) => any[];

declare const cloneElement: (vnode: VNode) => VNode | VNode[];
declare const createElement: unknown;
declare const isValidElement: (vnode?: VNode | null) => boolean;
declare const memo: (component: (...args: unknown[]) => VNode) => () => (props: VProps) => VNode;
declare const Children: {
    map: (children: VNode[] | null, fn: (this: VNode) => VNode) => VNode[] | null;
    forEach: (children: VNode[] | null, fn: (this: VNode) => VNode) => VNode[] | null;
    count(children: VNode[] | null): number;
    only(children: VNode[]): VNode | undefined;
    toArray: (children: VNode[]) => VNode[];
};
declare const lazy: (loader: () => Promise<FC>) => (props: VProps) => VNode | VNode[];
declare const createRef: () => {
    current: null;
};
declare const forwardRef: (fn: Function) => (props: VProps) => any;
declare const Suspense: (props: {
    fallback: VNode;
    children: VNode[];
}) => VNode[];
declare const SuspenseList: (props: {
    fallback: VNode;
    children: VNode[];
}) => VNode[];
declare const StrictMode: (props: {
    children: VNode[];
}) => VNode[];
declare class Component {
    props: VProps;
    context: ReturnType<typeof createContext> | undefined;
    queueRender: (_callback: () => any) => void;
    state: VProps;
    rerender?: Function;
    constructor(props: VProps, context?: ReturnType<typeof createContext>);
    componentDidMount(): boolean;
    componentDidUnmount(): boolean;
    componentDidUpdate(): boolean;
    shouldComponentUpdate(_newProps: VProps, _newState: VProps): boolean;
    componentDidCatch(_e: unknown): void;
    setState(update: VProps | Function, callback?: (state: VProps, props: VProps) => VProps): void;
    render(props?: VProps): VNode[] | undefined;
}
declare class PureComponent extends Component {
    shouldComponentUpdate(newProps: VProps, newState: VProps): boolean;
}

/**
 * Field on parent DOM node that stores the root DOM node reference
 */
declare const DOM_REF_FIELD = "__m_dom_ref";
/**
 * Field on DOM node that stores the previous VNode
 */
declare const OLD_VNODE_FIELD = "__m_old_vnode";
declare type VProps = Record<string, any>;
declare type DOMNode = (HTMLElement | SVGElement | Text | Comment) & {
    [OLD_VNODE_FIELD]?: VNode;
    [DOM_REF_FIELD]?: DOMNode;
};
declare type VNode = VElement | string;
declare type Delta = [DeltaTypes, number];
declare type Hook = (el?: DOMNode, newVNode?: VNode, oldVNode?: VNode) => boolean;
declare type Commit = (work: () => void, data: ReturnType<Driver>) => void;
declare type Driver = (el: DOMNode, newVNode?: VNode, oldVNode?: VNode, commit?: Commit, effects?: Effect[], driver?: Driver) => {
    el: DOMNode;
    newVNode?: VNode;
    oldVNode?: VNode;
    effects?: Effect[];
    commit?: Commit;
    driver?: Driver;
};
interface Effect {
    type: EffectTypes;
    el: DOMNode;
    flush: () => void;
}
declare enum HookTypes {
    CREATE = "create",
    REMOVE = "remove",
    UPDATE = "update",
    DIFF = "diff"
}
declare type Hooks = {
    [key in HookTypes]?: Hook | Hook[];
};
interface VElement {
    flag: Flags;
    tag: string;
    props?: VProps | null;
    children?: VNode[] | null;
    key?: string;
    delta?: Delta[];
    hook?: Hooks;
    ref?: {
        current: any;
    } & Record<string, any>;
    _parent?: VElement;
    _component?: Component;
}
declare enum Flags {
    ELEMENT = 0,
    ELEMENT_IGNORE = 1,
    ELEMENT_FORCE_UPDATE = 2,
    ELEMENT_SKIP_DRIVERS = 3,
    ELEMENT_NO_CHILDREN = 4,
    ELEMENT_TEXT_CHILDREN = 5,
    ELEMENT_KEYED_CHILDREN = 6
}
declare enum EffectTypes {
    CREATE = 0,
    REMOVE = 1,
    REPLACE = 2,
    UPDATE = 3,
    SET_PROP = 4,
    REMOVE_PROP = 5
}
declare const enum DeltaTypes {
    CREATE = 0,
    UPDATE = 1,
    REMOVE = 2
}

export { useDebugValue as A, useDeferredValue as B, Commit as C, DOMNode as D, Effect as E, Flags as F, useEffect as G, HookTypes as H, useImperativeHandle as I, JSX as J, useLayoutEffect as K, useMemo as L, useDelta as M, useList as N, OLD_VNODE_FIELD as O, PureComponent as P, useSyncExternalStore as Q, RawVNode as R, StrictMode as S, useReducer as T, useRef as U, VNode as V, useState as W, useTransition as X, VElement as a, VProps as b, Delta as c, Hooks as d, Hook as e, DeltaTypes as f, EffectTypes as g, DOM_REF_FIELD as h, Driver as i, FC as j, Component as k, hook as l, Children as m, Suspense as n, SuspenseList as o, cloneElement as p, createContext as q, createElement as r, createRef as s, forwardRef as t, isValidElement as u, lazy as v, memo as w, useId as x, useCallback as y, useContext as z };
